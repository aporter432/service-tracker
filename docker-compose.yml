version: '3.8'

services:
  # Main application service
  orbcomm-tracker:
    build:
      context: .
      dockerfile: Dockerfile
    image: orbcomm-tracker:latest
    container_name: orbcomm-tracker
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - ORBCOMM_DATA_DIR=/app/data
      - DATABASE_PATH=/app/data/tracker.db
      - LOG_LEVEL=INFO
      # Gmail API configuration
      - GMAIL_CREDENTIALS_PATH=/app/data/credentials.json
      - GMAIL_TOKEN_PATH=/app/data/token.json
    volumes:
      # Persistent data volume
      - orbcomm-data:/app/data
      # Mount credentials from host (for local development)
      - ${HOME}/.orbcomm:/app/data:ro
    restart: unless-stopped
    networks:
      - orbcomm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler service for automated syncs
  orbcomm-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: orbcomm-tracker:latest
    container_name: orbcomm-scheduler
    command: ["python", "orbcomm_scheduler.py"]
    environment:
      - ORBCOMM_DATA_DIR=/app/data
      - DATABASE_PATH=/app/data/tracker.db
      - LOG_LEVEL=INFO
    volumes:
      - orbcomm-data:/app/data
      - ${HOME}/.orbcomm:/app/data:ro
    restart: unless-stopped
    networks:
      - orbcomm-network
    depends_on:
      - orbcomm-tracker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: orbcomm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - orbcomm-tracker
    restart: unless-stopped
    networks:
      - orbcomm-network
    profiles:
      - production

  # Optional: PostgreSQL for production (migration from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: orbcomm-postgres
    environment:
      - POSTGRES_DB=orbcomm_tracker
      - POSTGRES_USER=orbcomm
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - orbcomm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orbcomm"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - production

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: orbcomm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - orbcomm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - production

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: orbcomm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - orbcomm-network
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: orbcomm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - orbcomm-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  orbcomm-network:
    driver: bridge

volumes:
  orbcomm-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
